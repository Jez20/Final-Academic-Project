/**
 * Author:  FV
 * Created: May 5, 2022
 */
CREATE SCHEMA UAAP_APPAREL;

CREATE TABLE PRODUCT_TABLE (PRODUCT_ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY(Start with 1, Increment by 1), 
PRODUCT_NAME VARCHAR(50) NOT NULL, 
PRODUCT_DESC VARCHAR(1000),
PRODUCT_SCHOOL VARCHAR(50) NOT NULL,
PRODUCT_CATEGORY VARCHAR(50) NOT NULL,
PRODUCT_GENDER VARCHAR(50) NOT NULL,
PRODUCT_SIZE VARCHAR(50) NOT NULL,
PRODUCT_PRICE INT NOT NULL,
PRODUCT_IMG_LINK VARCHAR(50) NOT NULL,
PRODUCT_STOCK INT NOT NULL
);

CREATE TABLE USER_TABLE(USER_ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY(Start with 1, Increment by 1),
USER_FNAME VARCHAR(45) NOT NULL,
USER_LNAME VARCHAR(45) NOT NULL,
USER_PASSWORD VARCHAR(1000) NOT NULL,
USER_ROLE VARCHAR(45) NOT NULL,
USER_EMAIL VARCHAR(100) NOT NULL
);

CREATE TABLE ORDER_TABLE (ORDER_ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY(Start with 1, Increment by 1),
PRODUCT_ID INTEGER NOT NULL REFERENCES PRODUCT_TABLE(PRODUCT_ID), 
USER_ID INTEGER NOT NULL REFERENCES USER_TABLE(USER_ID),
ORDER_QUANTITY INTEGER NOT NULL,
ORDER_PRICE INTEGER NOT NULL,
ORDER_ADDRESS VARCHAR(1000) NOT NULL,
ORDER_DATE DATE NOT NULL,
ORDER_DATE_COMPLETED DATE
);

CREATE TABLE CART_TABLE (CART_ID INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY(Start with 1, Increment by 1),
PRODUCT_ID INTEGER NOT NULL REFERENCES PRODUCT_TABLE(PRODUCT_ID), 
USER_ID INTEGER NOT NULL REFERENCES USER_TABLE(USER_ID),
QUANTITY INTEGER NOT NULL,
CARTORDER_PRICE INTEGER NOT NULL
);

SELECT * FROM CART_TABLE
SELECT
CART_TABLE.CART_ID,
CART_TABLE.PRODUCT_ID,
CART_TABLE.USER_ID,
CART_TABLE.QUANTITY,
CART_TABLE.CARTORDER_PRICE,
PRODUCT_TABLE.PRODUCT_PRICE,
PRODUCT_TABLE.PRODUCT_IMG_LINK
FROM CART_TABLE JOIN PRODUCT_TABLE ON PRODUCT_TABLE.PRODUCT_ID = CART_TABLE.PRODUCT_ID
WHERE CART_TABLE.USER_ID = 1;
INSERT INTO CART_TABLE (PRODUCT_ID, USER_ID, QUANTITY, CARTORDER_PRICE) 
	VALUES (1, 1, 3, 10);
UPDATE CART_TABLE SET "QUANTITY" = 3, "CARTORDER_PRICE" = 6 WHERE CART_ID = 2; --FOR USERS ONLY

SELECT * FROM PRODUCT_TABLE ORDER BY PRODUCT_STOCK ASC

SELECT 
PRODUCT_ID as ID,
PRODUCT_NAME Name,
PRODUCT_DESC as Description,
PRODUCT_SCHOOL as School,
PRODUCT_CATEGORY as Category ,
PRODUCT_GENDER as Gender,
PRODUCT_SIZE as Size,
PRODUCT_PRICE as Price,
PRODUCT_IMG_LINK as Img_Link,
PRODUCT_STOCK as Stock
 FROM PRODUCT_TABLE ORDER BY PRODUCT_STOCK ASC; -- ADMIN VIEW THE STOCK OF ITEMS

UPDATE PRODUCT_TABLE SET 
"PRODUCT_NAME"= ?
"PRODUCT_DESCRIPTION"= ?
"PRODUCT_SCHOOL" = ?
"PRODUCT_CATEGORY" = ?
"PRODUCT_GENDER" = ?
"PRODUCT_SIZE" = ?
"PRODUCT_PRICE" = ?
"PRODUCT_IMG_LINK" = ?
"PRODUCT_STOCK" = ?
WHERE ID = ?

SELECT 
USER_ID AS ID,
USER_FNAME AS FNAME,
USER_ROLE AS ROLE,
USER_EMAIL AS EMAIL
 FROM USER_TABLE; --ADMIN VIEW ALL USERS

SELECT COUNT(ORDER_ID) FROM ORDER_TABLE WHERE ORDER_DATE_COMPLETED IS NULL; --ADMIN ONLY
SELECT COUNT(PRODUCT_ID) FROM PRODUCT_TABLE; --ADMIN ONLY

SELECT ALLUNIV,UP,UST,ATENEO,FEU,LA_SALLE,NU,ADAMSON,UE
FROM (SELECT COUNT(PRODUCT_ID) AS ALLUNIV FROM PRODUCT_TABLE) ALLUNIV
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS UP FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'UP') UP
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS UST FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'UST') UST
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS ATENEO FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'ATENEO') ATENEO
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS FEU FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'FEU') FEU
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS LA_SALLE FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'LA SALLE') LA_SALLE
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS NU FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'NU') NU
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS ADAMSON FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL='ADAMSON') ADAMSON
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS UE FROM PRODUCT_TABLE WHERE PRODUCT_SCHOOL = 'UE') UE

SELECT ALLP,M,F,U
FROM (SELECT COUNT(PRODUCT_ID) AS ALLP  FROM PRODUCT_TABLE) ALLP
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS M FROM PRODUCT_TABLE WHERE PRODUCT_GENDER = 'M') M
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS F FROM PRODUCT_TABLE WHERE PRODUCT_GENDER = 'F') F
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS U FROM PRODUCT_TABLE WHERE PRODUCT_GENDER = 'U') U

SELECT ALLS,XS,S,M,L,XL
FROM (SELECT COUNT(PRODUCT_ID) AS ALLS FROM PRODUCT_TABLE) ALLS
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS XS FROM PRODUCT_TABLE WHERE PRODUCT_SIZE = 'XS') XS
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS S FROM PRODUCT_TABLE WHERE  PRODUCT_SIZE = 'S') S
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS M FROM PRODUCT_TABLE WHERE  PRODUCT_SIZE = 'M') M
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS L FROM PRODUCT_TABLE WHERE  PRODUCT_SIZE = 'L') L
CROSS JOIN (SELECT COUNT(PRODUCT_ID) AS XL FROM PRODUCT_TABLE WHERE  PRODUCT_SIZE = 'XL') XL

SELECT * FROM ORDER_TABLE WHERE ORDER_DATE BETWEEN '2022-01-02' AND '2022-02-15' -- 1 constraint, 2 contraints 
AND ORDER_COMPLETED BETWEEN '2022-01-08' AND '2022-02-15' -- 2 contraints, 2 contraints
ORDER BY ORDER_ISPENDING ASC, ORDER_DATE ASC; --FOR ADMIN ONLY

SELECT 
ORDER_TABLE.ORDER_ID,
ORDER_TABLE.PRODUCT_ID,
ORDER_TABLE.USER_ID,
ORDER_TABLE.QUANTITY,
ORDER_TABLE.ORDER_PRICE,
ORDER_TABLE.ORDER_ISPENDING,
ORDER_TABLE.ORDER_DATE,
ORDER_TABLE.ORDER_COMPLETED,
PRODUCT_TABLE.PRODUCT_IMG_LINK
 FROM ORDER_TABLE JOIN PRODUCT_TABLE ON PRODUCT_TABLE.PRODUCT_ID = ORDER_TABLE.PRODUCT_ID
 WHERE USER_ID=3 AND ORDER BY ORDER_DATE DESC; --ORDERED ITEMS BY USERS
--THAT HAVE NOT BEEN FULFILLED --FOR USERS

SELECT 
ORDER_TABLE.ORDER_ID,
ORDER_TABLE.PRODUCT_ID,
ORDER_TABLE.USER_ID,
ORDER_TABLE.QUANTITY,
ORDER_TABLE.ORDER_PRICE,
ORDER_TABLE.ORDER_ISPENDING,
ORDER_TABLE.ORDER_DATE,
ORDER_TABLE.ORDER_COMPLETED,
PRODUCT_TABLE.PRODUCT_IMG_LINK
 FROM ORDER_TABLE JOIN PRODUCT_TABLE ON PRODUCT_TABLE.PRODUCT_ID = ORDER_TABLE.PRODUCT_ID
WHERE USER_ID=3 AND ORDER_ISPENDING = FALSE ORDER BY 
ORDER_ISPENDING DESC,ORDER_TABLE.ORDER_DATE DESC; --FOR USERS

SELECT * FROM PRODUCT_TABLE WHERE 
PRODUCT_PRICE BETWEEN 0 AND 999999 AND 
PRODUCT_SIZE LIKE '%%' AND
PRODUCT_SCHOOL LIKE '%UST%' AND
PRODUCT_GENDER LIKE '%%' AND
PRODUCT_CATEGORY LIKE '%Jackets%'; --UNIFIED SEARCH QUERY


-- search query for any item in the database regardless of lower or uppercase just choose one of the 
-- two queries below
SELECT DISTINCT * FROM PRODUCT_TABLE WHERE UPPER(PRODUCT_NAME) LIKE UPPER('%UST%')  OR
UPPER(PRODUCT_SCHOOL) LIKE UPPER('%UST%') 

SELECT DISTINCT * FROM PRODUCT_TABLE WHERE LOWER(PRODUCT_IMG_LINK) LIKE LOWER('%do%')

DELETE FROM ORDER_TABLE;
DELETE FROM PRODUCT_TABLE;

-- a test whether the key constraints work
-- INSERT INTO APP.ORDER_TABLE (PRODUCT_ID, USER_ID, QUANTITY, ORDER_PRICE, ORDER_ISPENDING, ORDER_DATE, ORDER_COMPLETED) 
-- 	VALUES (22, 4, 9, 30114, true, '2022-01-29', CURRENT_DATE)

INSERT INTO APP.PRODUCT_TABLE (PRODUCT_NAME, PRODUCT_DESC, PRODUCT_SCHOOL, PRODUCT_CATEGORY, PRODUCT_GENDER, PRODUCT_SIZE, PRODUCT_PRICE, PRODUCT_IMG_LINK, PRODUCT_STOCK) 
	VALUES ('TEST PRODUCT', 'TEST DESC', 'FEU', 'Caps', 'F', 'XL', 50, 'TEST.COM', 50)

INSERT INTO APP.USER_TABLE (USER_FNAME, USER_LNAME, USER_PASSWORD, USER_ROLE, USER_EMAIL) 
	VALUES ('James', 'Cruz', '123', 'Customer', 'xd.gamil.om')
INSERT INTO APP.USER_TABLE (USER_FNAME, USER_LNAME, USER_PASSWORD, USER_ROLE, USER_EMAIL) 
	VALUES ('May', 'Mambog', '123', 'Admin', 'Hatdog.gmail.com')
INSERT INTO APP.USER_TABLE (USER_FNAME, USER_LNAME, USER_PASSWORD, USER_ROLE, USER_EMAIL) 
	VALUES ('Jared', 'Ruckel', '125', 'Customer', 'customer.gamil.com')


